//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inventory/InventoryInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryInputSystem"",
    ""maps"": [
        {
            ""name"": ""Inventory"",
            ""id"": ""857c4dd4-4900-48c7-a0fc-caccb5381d34"",
            ""actions"": [
                {
                    ""name"": ""FastMoving"",
                    ""type"": ""Button"",
                    ""id"": ""8e9b5356-c846-4b33-acc3-e18ed1831c7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateItem"",
                    ""type"": ""Button"",
                    ""id"": ""67c74a2d-53dc-4b09-8fb6-c6591da7681a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FastMovingItemsSameType"",
                    ""type"": ""Button"",
                    ""id"": ""f73eb4e4-d387-425d-a2cd-c765efa35e2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""7db747c9-994d-4771-a23a-9c335c512283"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LB+Shift"",
                    ""id"": ""e51693a0-0e53-427e-8268-edea1d5107d1"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMoving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""58250ac4-662a-449f-81b8-9d58cc9357da"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""11396234-6025-40f9-831e-a2338bd1bc23"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43aa775e-5a9f-4f88-9aa5-6c3558aa8196"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Ctrl+LB"",
                    ""id"": ""f41e9c08-9b16-4741-95cb-6ce42ec1d9fb"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMovingItemsSameType"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""7e5096f6-cbd2-4266-9713-1ffa360055bc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMovingItemsSameType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""2df7183e-6e69-4c44-9efc-ff8fce11ccfd"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastMovingItemsSameType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a59b871f-67f2-434a-93d2-911276c27b3f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_FastMoving = m_Inventory.FindAction("FastMoving", throwIfNotFound: true);
        m_Inventory_RotateItem = m_Inventory.FindAction("RotateItem", throwIfNotFound: true);
        m_Inventory_FastMovingItemsSameType = m_Inventory.FindAction("FastMovingItemsSameType", throwIfNotFound: true);
        m_Inventory_LeftButton = m_Inventory.FindAction("LeftButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_FastMoving;
    private readonly InputAction m_Inventory_RotateItem;
    private readonly InputAction m_Inventory_FastMovingItemsSameType;
    private readonly InputAction m_Inventory_LeftButton;
    public struct InventoryActions
    {
        private @InventoryInputSystem m_Wrapper;
        public InventoryActions(@InventoryInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @FastMoving => m_Wrapper.m_Inventory_FastMoving;
        public InputAction @RotateItem => m_Wrapper.m_Inventory_RotateItem;
        public InputAction @FastMovingItemsSameType => m_Wrapper.m_Inventory_FastMovingItemsSameType;
        public InputAction @LeftButton => m_Wrapper.m_Inventory_LeftButton;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @FastMoving.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMoving;
                @FastMoving.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMoving;
                @FastMoving.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMoving;
                @RotateItem.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @RotateItem.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @RotateItem.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnRotateItem;
                @FastMovingItemsSameType.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMovingItemsSameType;
                @FastMovingItemsSameType.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMovingItemsSameType;
                @FastMovingItemsSameType.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnFastMovingItemsSameType;
                @LeftButton.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftButton;
                @LeftButton.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftButton;
                @LeftButton.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnLeftButton;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FastMoving.started += instance.OnFastMoving;
                @FastMoving.performed += instance.OnFastMoving;
                @FastMoving.canceled += instance.OnFastMoving;
                @RotateItem.started += instance.OnRotateItem;
                @RotateItem.performed += instance.OnRotateItem;
                @RotateItem.canceled += instance.OnRotateItem;
                @FastMovingItemsSameType.started += instance.OnFastMovingItemsSameType;
                @FastMovingItemsSameType.performed += instance.OnFastMovingItemsSameType;
                @FastMovingItemsSameType.canceled += instance.OnFastMovingItemsSameType;
                @LeftButton.started += instance.OnLeftButton;
                @LeftButton.performed += instance.OnLeftButton;
                @LeftButton.canceled += instance.OnLeftButton;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IInventoryActions
    {
        void OnFastMoving(InputAction.CallbackContext context);
        void OnRotateItem(InputAction.CallbackContext context);
        void OnFastMovingItemsSameType(InputAction.CallbackContext context);
        void OnLeftButton(InputAction.CallbackContext context);
    }
}
